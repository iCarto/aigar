# Generated by Django 4.2 on 2025-03-03 11:54

import back.fields
from decimal import Decimal
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AigarConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', back.fields.StrictCharField(default='Junta de Agua', help_text='Nombre de la Junta de Agua como desea que aparezca en los recibos', max_length=255, min_length=3, verbose_name='Nombre de la Junta de Agua')),
                ('payment_method', models.TextField(default='BANCO .... Cuenta No: .... ', help_text='Tal cual quiere que aparezca en el recibo', verbose_name='Forma de pago')),
                ('payment_csv', models.BooleanField(default=False, help_text='Marque esta casilla si los pagos se importarán mediante un CSV generado por el banco', verbose_name='Importar pagos en CSV')),
                ('payment_due_day', back.fields.RangedIntegerField(default=15, help_text='Día del mes hasta el que (incluido) el pago no tendrá mora.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(27)], verbose_name='Día límite de pago')),
                ('comision', models.DecimalField(decimal_places=2, default=Decimal('0.56'), help_text='Comisión de pago banco (dentro de la cuota)', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Comisión de pago banco')),
                ('recargo_mora', models.DecimalField(decimal_places=2, default=Decimal('1'), help_text='Recargo por mora', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Recargo por mora')),
                ('asamblea', models.DecimalField(decimal_places=2, default=Decimal('2'), help_text='Inasistencia a asambleas', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Inasistencia a asambleas')),
                ('jornada_trabajo', models.DecimalField(decimal_places=2, default=Decimal('2'), help_text='Incremento de coste por no haber participado en la Jornada de Trabajo', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Jornada de trabajo')),
                ('reconexion', models.DecimalField(decimal_places=2, default=Decimal('10'), help_text='Re-conexión', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Re-conexión')),
                ('ahorro', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Ahorro mano de obra (dentro de la cuota)', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Ahorro mano de obra')),
                ('traspaso_derecho', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Traspaso de derecho (cambio de nombre)', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Traspaso de derecho')),
                ('humano_cuota_fija', models.DecimalField(decimal_places=2, default=Decimal('5.72'), help_text='Cuota fija - Consumo Humano (valor en $)', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Cuota fija - Consumo Humano')),
                ('comercial_cuota_fija', models.DecimalField(decimal_places=2, default=Decimal('5.72'), help_text='Cuota fija - Consumo Comercial - (valor en $)', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Cuota fija - Consumo Comercial')),
                ('humano_nuevo_derecho_total', models.DecimalField(decimal_places=2, default=Decimal('300'), help_text='Nuevo derecho - Humano (valor total en $)', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Nuevo derecho - Humano (valor total en $)')),
                ('humano_nuevo_derecho_primera_cuota', models.DecimalField(decimal_places=2, default=Decimal('100'), help_text='Nuevo derecho - Humano (pago mínimo en $ / primera cuota)', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Nuevo derecho - Humano (pago mínimo en $ / primera cuota)')),
                ('comercial_nuevo_derecho_total', models.DecimalField(decimal_places=2, default=Decimal('400'), help_text='Nuevo derecho - Comercial (valor total en $)', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Nuevo derecho - Comercial (valor total en $)')),
                ('comercial_nuevo_derecho_primera_cuota', models.DecimalField(decimal_places=2, default=Decimal('150'), help_text='Nuevo derecho - Comercial (pago mínimo en $ / primera cuota)', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Nuevo derecho - Comercial (pago mínimo en $ / primera cuota)')),
                ('nuevo_derecho_siguientes_cuotas_opcion1', models.DecimalField(blank=True, decimal_places=2, help_text='Valor a seleccionar en la interfaz como siguientes cuotas del nuevo derecho en $, descontando la primera', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Opción 1 de cuotas para nuevo derecho de conexión')),
                ('nuevo_derecho_siguientes_cuotas_opcion2', models.DecimalField(blank=True, decimal_places=2, help_text='Valor a seleccionar en la interfaz como siguientes cuotas del nuevo derecho en $, descontando la primera', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Opción 2 de cuotas para nuevo derecho de conexión')),
                ('nuevo_derecho_siguientes_cuotas_opcion3', models.DecimalField(blank=True, decimal_places=2, help_text='Valor a seleccionar en la interfaz como siguientes cuotas del nuevo derecho en $, descontando la primera', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Opción 3 de cuotas para nuevo derecho de conexión')),
                ('nuevo_derecho_siguientes_cuotas_opcion4', models.DecimalField(blank=True, decimal_places=2, help_text='Valor a seleccionar en la interfaz como siguientes cuotas del nuevo derecho en $, descontando la primera', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Opción 4 de cuotas para nuevo derecho de conexión')),
                ('nuevo_derecho_siguientes_cuotas_opcion5', models.DecimalField(blank=True, decimal_places=2, help_text='Valor a seleccionar en la interfaz como siguientes cuotas del nuevo derecho en $, descontando la primera', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Opción 5 de cuotas para nuevo derecho de conexión')),
                ('nuevo_derecho_siguientes_cuotas_opcion6', models.DecimalField(blank=True, decimal_places=2, help_text='Valor a seleccionar en la interfaz como siguientes cuotas del nuevo derecho en $, descontando la primera', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Opción 6 de cuotas para nuevo derecho de conexión')),
                ('humano_cuota_variable_primer_tramo_cantidad', models.DecimalField(blank=True, decimal_places=2, default=Decimal('14'), help_text='Primer tramo de consumo. De 0 a este valor incluído. Déjelo en blanco si todo el consumo tiene el mismo coste', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Primer tramo - m3')),
                ('humano_cuota_variable_primer_tramo_coste', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Coste del consumo que esté dentro de este tramo', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Primer tramo - $')),
                ('humano_cuota_variable_segundo_tramo_cantidad', models.DecimalField(blank=True, decimal_places=2, default=Decimal('20'), help_text='El segundo tramo va desde el final del tramo anterior hasta este valor (incluído). Déjelo en blanco si cualquier valor mayor al tramo anterior tiene el mismo coste', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Segundo tramo - m3')),
                ('humano_cuota_variable_segundo_tramo_coste', models.DecimalField(decimal_places=2, default=Decimal('0.75'), help_text='Coste del consumo que esté dentro de este tramo. Déjelo a 0 si este tramo no aplica.', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Segundo tramo - $')),
                ('humano_cuota_variable_tercer_tramo_cantidad', models.DecimalField(blank=True, decimal_places=2, help_text='El tercer tramo va desde el final del tramo anterior hasta este valor (incluído). Déjelo en blanco si cualquier valor mayor al tramo anterior tiene el mismo coste', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Tercer tramo - m3')),
                ('humano_cuota_variable_tercer_tramo_coste', models.DecimalField(decimal_places=2, default=Decimal('2'), help_text='Coste del consumo que esté dentro de este tramo. Déjelo a 0 si este tramo no aplica.', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Tercer tramo - $')),
                ('humano_cuota_variable_cuarto_tramo_cantidad', models.DecimalField(blank=True, decimal_places=2, help_text='El cuarto tramo va desde el final del tramo anterior hasta este valor (incluído). Déjelo en blanco si cualquier valor mayor al tramo anterior tiene el mismo coste', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Cuarto tramo - m3')),
                ('humano_cuota_variable_cuarto_tramo_coste', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Coste del consumo que esté dentro de este tramo. Déjelo a 0 si este tramo no aplica.', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Cuarto tramo - $')),
                ('humano_cuota_variable_quinto_tramo_cantidad', models.DecimalField(blank=True, decimal_places=2, help_text='El quinto tramo va desde el final del tramo anterior hasta este valor (incluído). Déjelo en blanco si cualquier valor mayor al tramo anterior tiene el mismo coste', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Quinto tramo - m3')),
                ('humano_cuota_variable_quinto_tramo_coste', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Coste del consumo que esté dentro de este tramo. Déjelo a 0 si este tramo no aplica.', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Quinto tramo - $')),
                ('humano_cuota_variable_sexto_tramo_cantidad', models.DecimalField(blank=True, decimal_places=2, help_text='El sexto tramo va desde el final del tramo anterior hasta este valor (incluído). Déjelo en blanco si cualquier valor mayor al tramo anterior tiene el mismo coste', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Sexto tramo - m3')),
                ('humano_cuota_variable_sexto_tramo_coste', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Coste del consumo que esté dentro de este tramo. Déjelo a 0 si este tramo no aplica.', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Sexto tramo - $')),
                ('humano_cuota_variable_septimo_tramo_cantidad', models.DecimalField(blank=True, decimal_places=2, help_text='El septimo tramo va desde el final del tramo anterior hasta este valor (incluído). Déjelo en blanco si cualquier valor mayor al tramo anterior tiene el mismo coste', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Cuota Variable - Humano - séptimo tramo (m3)')),
                ('humano_cuota_variable_septimo_tramo_coste', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Coste del consumo que esté dentro de este tramo. Déjelo a 0 si este tramo no aplica.', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Humano - Cuota Variable - séptimo tramo ($)')),
                ('humano_cuota_variable_octavo_tramo_cantidad', models.DecimalField(blank=True, decimal_places=2, help_text='El octavo tramo va desde el final del tramo anterior hasta este valor (incluído). Déjelo en blanco si cualquier valor mayor al tramo anterior tiene el mismo coste', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Cuota Variable - Humano - octavo tramo (m3)')),
                ('humano_cuota_variable_octavo_tramo_coste', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Coste del consumo que esté dentro de este tramo. Déjelo a 0 si este tramo no aplica.', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Humano - Cuota Variable - octavo tramo ($)')),
                ('comercial_cuota_variable_primer_tramo_cantidad', models.DecimalField(blank=True, decimal_places=2, help_text='Primer tramo de consumo. De 0 a este valor incluído. Déjelo en blanco si todo el consumo tiene el mismo coste', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Primer tramo - m3')),
                ('comercial_cuota_variable_primer_tramo_coste', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Primer tramo ($)', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Primer tramo - $')),
                ('comercial_cuota_variable_segundo_tramo_cantidad', models.DecimalField(blank=True, decimal_places=2, help_text='El segundo tramo va desde el final del tramo anterior hasta este valor (incluído). Déjelo en blanco si cualquier valor mayor al tramo anterior tiene el mismo coste', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Segundo tramo - m3')),
                ('comercial_cuota_variable_segundo_tramo_coste', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Coste del consumo que esté dentro de este tramo. Déjelo a 0 si este tramo no aplica.', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Segundo tramo - $')),
                ('comercial_cuota_variable_tercer_tramo_cantidad', models.DecimalField(blank=True, decimal_places=2, help_text='El tercer tramo va desde el final del tramo anterior hasta este valor (incluído). Déjelo en blanco si cualquier valor mayor al tramo anterior tiene el mismo coste', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Tercer tramo - m3')),
                ('comercial_cuota_variable_tercer_tramo_coste', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Coste del consumo que esté dentro de este tramo. Déjelo a 0 si este tramo no aplica.', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Tercer tramo - $')),
                ('comercial_cuota_variable_cuarto_tramo_cantidad', models.DecimalField(blank=True, decimal_places=2, help_text='El cuarto tramo va desde el final del tramo anterior hasta este valor (incluído). Déjelo en blanco si cualquier valor mayor al tramo anterior tiene el mismo coste', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Cuarto tramo - m3')),
                ('comercial_cuota_variable_cuarto_tramo_coste', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Coste del consumo que esté dentro de este tramo. Déjelo a 0 si este tramo no aplica.', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Cuarto tramo - $')),
                ('comercial_cuota_variable_quinto_tramo_cantidad', models.DecimalField(blank=True, decimal_places=2, help_text='El quinto tramo va desde el final del tramo anterior hasta este valor (incluído). Déjelo en blanco si cualquier valor mayor al tramo anterior tiene el mismo coste', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Quinto tramo - m3')),
                ('comercial_cuota_variable_quinto_tramo_coste', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Coste del consumo que esté dentro de este tramo. Déjelo a 0 si este tramo no aplica.', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Quinto tramo - $')),
                ('comercial_cuota_variable_sexto_tramo_cantidad', models.DecimalField(blank=True, decimal_places=2, help_text='El sexto tramo va desde el final del tramo anterior hasta este valor (incluído). Déjelo en blanco si cualquier valor mayor al tramo anterior tiene el mismo coste', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Sexto tramo - m3')),
                ('comercial_cuota_variable_sexto_tramo_coste', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Coste del consumo que esté dentro de este tramo. Déjelo a 0 si este tramo no aplica.', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Sexto tramo - $')),
                ('comercial_cuota_variable_septimo_tramo_cantidad', models.DecimalField(blank=True, decimal_places=2, help_text='El septimo tramo va desde el final del tramo anterior hasta este valor (incluído). Déjelo en blanco si cualquier valor mayor al tramo anterior tiene el mismo coste', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Cuota Variable - Comercial - séptimo tramo (m3)')),
                ('comercial_cuota_variable_septimo_tramo_coste', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Coste del consumo que esté dentro de este tramo. Déjelo a 0 si este tramo no aplica.', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Comercial - Cuota Variable - séptimo tramo ($)')),
                ('comercial_cuota_variable_octavo_tramo_cantidad', models.DecimalField(blank=True, decimal_places=2, help_text='El octavo tramo va desde el final del tramo anterior hasta este valor (incluído). Déjelo en blanco si cualquier valor mayor al tramo anterior tiene el mismo coste', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Cuota Variable - Comercial - octavo tramo (m3)')),
                ('comercial_cuota_variable_octavo_tramo_coste', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Coste del consumo que esté dentro de este tramo. Déjelo a 0 si este tramo no aplica.', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Comercial - Cuota Variable - octavo tramo ($)')),
            ],
            options={
                'verbose_name': 'Configuración de AIGAR',
                'verbose_name_plural': 'Configuración de AIGAR',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Locality',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', back.fields.StrictCharField(apply='capitalize', help_text='Nombre completo de la comunidad.', max_length=255, min_length=3, unique=True, verbose_name='nombre')),
                ('short_name', back.fields.StrictCharField(help_text='Nombre corto de la comunidad. Se usa en algunas partes de la aplicación (tablas, ...). Máximo 13 caracteres.', max_length=13, min_length=3, unique=True, verbose_name='nombre corto')),
                ('number_of_sectors', models.PositiveSmallIntegerField(help_text='Introduzca un cero si la comunidad no tiene sectores.', verbose_name='número de sectores')),
            ],
            options={
                'verbose_name': 'comunidad',
                'verbose_name_plural': 'comunidades',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Zone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', back.fields.StrictCharField(editable=False, help_text='Nombre del sector o comunidad. No debe repetirse.', max_length=255, unique=True, verbose_name='nombre')),
                ('code', back.fields.StrictCharField(blank=True, editable=False, help_text='Si la comunidad tiene sectores introduzca el número de este sector. Deben ser correlativos.', max_length=255, min_length=1, null=True, verbose_name='número de sector')),
                ('reading_day', back.fields.RangedIntegerField(default=27, help_text='Día de lectura de los medidores', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)], verbose_name='Día de lectura')),
                ('locality', models.ForeignKey(db_column='locality_short_name', db_index=False, editable=False, on_delete=django.db.models.deletion.CASCADE, to='domains.locality', to_field='short_name', verbose_name='comunidad')),
            ],
            options={
                'verbose_name': 'Sector / Comunidad',
                'verbose_name_plural': 'Sectores / Comunidades',
                'ordering': ('id',),
            },
        ),
        migrations.AddConstraint(
            model_name='aigarconfig',
            constraint=models.CheckConstraint(check=models.Q(('payment_due_day__range', (1, 28))), name='domains_aigarconfig_payment_due_day_range', violation_error_message='El día límite de pago debe estar entre 1 y 28'),
        ),
    ]
